"use strict";
/**
 *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiAuthApiGatewayLambda = void 0;
const api = require("@aws-cdk/aws-apigateway");
const defaults = require("@aws-solutions-constructs/core");
const core_1 = require("@aws-cdk/core");
var RESOURCE_TYPE;
(function (RESOURCE_TYPE) {
    RESOURCE_TYPE["INERNAL"] = "internal";
    RESOURCE_TYPE["EXTERNAL"] = "external";
    RESOURCE_TYPE["UNPROTECTED"] = "unprotetected";
})(RESOURCE_TYPE || (RESOURCE_TYPE = {}));
class MultiAuthApiGatewayLambda extends core_1.Construct {
    /**
     * @summary Constructs a new instance of the MultiAuthApiGatewayLambda class.
     * @param {cdk.App} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {MultiAuthApiGatewayLambdaProps} props - user provided props for the construct
     * @since 0.8.0
     * @access public
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.lambdaFunction = defaults.buildLambdaFunction(this, {
            existingLambdaObj: props.existingLambdaObj,
            lambdaFunctionProps: props.lambdaFunctionProps,
        });
        [this.apiGateway, this.apiGatewayCloudWatchRole, this.apiGatewayLogGroup] = defaults.GlobalLambdaRestApi(this, this.lambdaFunction, props.apiGatewayProps);
        this.userPool = defaults.buildUserPool(this, props.cognitoUserPoolProps);
        this.userPoolClient = defaults.buildUserPoolClient(this, this.userPool, props.cognitoUserPoolClientProps);
        this.apiGatewayAuthorizer = new api.CfnAuthorizer(this, 'CognitoAuthorizer', {
            restApiId: this.apiGateway.restApiId,
            type: api.AuthorizationType.COGNITO,
            providerArns: [this.userPool.userPoolArn],
            identitySource: 'method.request.header.Authorization',
            name: 'cognito-authorizer',
        });
        this.externalResource = this.apiGateway.root.addResource(RESOURCE_TYPE.EXTERNAL);
        this.internalResource = this.apiGateway.root.addResource(RESOURCE_TYPE.INERNAL);
        this.unprotectedResource = this.apiGateway.root.addResource(RESOURCE_TYPE.UNPROTECTED);
    }
    addAuthorizers() {
        this.apiGateway.methods.forEach((apiMethod) => {
            if (apiMethod.resource.path.startsWith(`/${RESOURCE_TYPE.EXTERNAL}`)) {
                this.addCognitoAuthorizer(apiMethod);
            }
            else if (apiMethod.resource.path.startsWith(`/${RESOURCE_TYPE.INERNAL}`)) {
                this.addIamAuthorizer(apiMethod);
            }
            else {
                this.addNoAuthorizer(apiMethod);
            }
        });
    }
    addNoAuthorizer(apiMethod) {
        const child = apiMethod.node.findChild('Resource');
        child.addPropertyOverride('AuthorizationType', api.AuthorizationType.NONE);
    }
    addCognitoAuthorizer(apiMethod) {
        // Leave the authorizer NONE for HTTP OPTIONS method to support CORS, for the rest set it to COGNITO
        const child = apiMethod.node.findChild('Resource');
        if (apiMethod.httpMethod === 'OPTIONS') {
            child.addPropertyOverride('AuthorizationType', api.AuthorizationType.NONE);
        }
        else {
            child.addPropertyOverride('AuthorizationType', api.AuthorizationType.COGNITO);
            child.addPropertyOverride('AuthorizerId', { Ref: this.apiGatewayAuthorizer.logicalId });
        }
    }
    addIamAuthorizer(apiMethod) {
        // Leave the authorizer NONE for HTTP OPTIONS method to support CORS, for the rest set it to COGNITO
        const child = apiMethod.node.findChild('Resource');
        if (apiMethod.httpMethod === 'OPTIONS') {
            child.addPropertyOverride('AuthorizationType', api.AuthorizationType.NONE);
        }
        else {
            child.addPropertyOverride('AuthorizationType', api.AuthorizationType.IAM);
        }
    }
}
exports.MultiAuthApiGatewayLambda = MultiAuthApiGatewayLambda;
exports.default = MultiAuthApiGatewayLambda;
//# sourceMappingURL=data:application/json;base64,